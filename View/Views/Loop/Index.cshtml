@model IEnumerable<Core.Models.Loop>

@{
    ViewData["Title"] = "Index";
}

<h1>Loops</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<h4>Map</h4>
@using (Html.BeginForm("Index", "Loop", FormMethod.Get))
{

    <div class="form-group">
        <label for="loopId" class="control-label">Loop:</label>
        <select style="margin-bottom: 20px;" id="loopId" name="loopId" class="form-select" asp-items="ViewBag.AvailableLoops"></select>
    </div>

    <div class="form-group form-check">
        <label class="form-check-label">
            <input class="form-check-input" id="filterByVisits" name="filterByVisits" /> Show Only Top 5 Busiest Stops
        </label>
    </div>

    <div class="form-group" style="margin-top: 20px;">
        <button onclick="this.form.submit()" class="btn btn-primary">Filter</button>
    </div> 
    
}
<div id="map" style="height: 600px;width: 100%;"></div>


@section Scripts {
    <script>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: "AIzaSyDvME3AVi6GUSS2-u5RfYJfSe49vZIXmgk", v: "beta" });</script>
    <script>
        let map;

        async function initMap() {
            let stops = @Json.Serialize(ViewBag.StopsForMap);
            const position = { lat: 40.20881247524049, lng: -85.40838527111939 };
            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerView } = await google.maps.importLibrary("marker");

            let map = new google.maps.Map(document.getElementById("map"), {
                zoom: 15,
                center: position,
                mapId: "map",
            });

            stops.forEach(stop => {
                const position = {
                    lat: stop.latitude,
                    lng: stop.longitude
                };
                const marker = new google.maps.Marker({
                    map: map,
                    position: position,
                    title: stop.name,
                });
            });
        }

        initMap();
    </script>
}
